"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7091],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=s(t),f=a,b=m["".concat(c,".").concat(f)]||m[f]||p[f]||l;return t?r.createElement(b,o(o({ref:n},u),{},{components:t})):r.createElement(b,o({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},640:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const l={},o="Lexical conventions",i={unversionedId:"lexical_conventions/README",id:"lexical_conventions/README",title:"Lexical conventions",description:"\x3c!--",source:"@site/../docs/design/lexical_conventions/README.md",sourceDirName:"lexical_conventions",slug:"/lexical_conventions/",permalink:"/carbon-lang/design/lexical_conventions/",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/design/lexical_conventions/README.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Interoperability philosophy and goals",permalink:"/carbon-lang/design/interoperability/philosophy_and_goals"},next:{title:"Numeric literals",permalink:"/carbon-lang/design/lexical_conventions/numeric_literals"}},c={},s=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Lexical elements",id:"lexical-elements",level:2}],u={toc:s};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"lexical-conventions"},"Lexical conventions"),(0,a.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#lexical-elements"},"Lexical elements"))),(0,a.kt)("h2",{id:"lexical-elements"},"Lexical elements"),(0,a.kt)("p",null,"The first stage of processing a\n",(0,a.kt)("a",{parentName:"p",href:"/design/code_and_name_organization/source_files"},"source file")," is the\ndivision of the source file into lexical elements."),(0,a.kt)("p",null,"A ",(0,a.kt)("em",{parentName:"p"},"lexical element")," is one of the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"a maximal sequence of ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/carbon-lang/design/lexical_conventions/whitespace"},"whitespace")," characters"),(0,a.kt)("li",{parentName:"ul"},"a ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/carbon-lang/design/lexical_conventions/words"},"word")),(0,a.kt)("li",{parentName:"ul"},"a literal:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"a ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/carbon-lang/design/lexical_conventions/numeric_literals"},"numeric literal")),(0,a.kt)("li",{parentName:"ul"},"a ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/carbon-lang/design/lexical_conventions/string_literals"},"string literal")))),(0,a.kt)("li",{parentName:"ul"},"TODO: operators, comments, ...")),(0,a.kt)("p",null,"The sequence of lexical elements is formed by repeatedly removing the longest\ninitial sequence of characters that forms a valid lexical element."))}p.isMDXComponent=!0}}]);